// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"context"
	"database/sql"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

type Queries struct {
	db DBTX
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db: tx,
	}
}



// CreateTransfer creates a new transfer record

func (q *Queries) CreateTransfer(ctx context.Context, arg CreateTransferParams) (Transfer, error) {

    var transfer Transfer

    err := q.db.QueryRowContext(ctx, `

        INSERT INTO transfers (from_account_id, to_account_id, amount)

        VALUES ($1, $2, $3)

        RETURNING id, from_account_id, to_account_id, amount, created_at

    `, arg.FromAccountID, arg.ToAccountID, arg.Amount).Scan(

        &transfer.ID,

        &transfer.FromAccountID,

        &transfer.ToAccountID,

        &transfer.Amount,

        &transfer.CreatedAt,

    )

    return transfer, err

}



// CreateEntry creates a new entry in the database

func (q *Queries) CreateEntry(ctx context.Context, arg CreateEntryParams) (Entry, error) {

    var entry Entry

    err := q.db.QueryRowContext(ctx, `

        INSERT INTO entries (account_id, amount)

        VALUES ($1, $2)

        RETURNING id, account_id, amount, created_at

    `, arg.AccountID, arg.Amount).Scan(

        &entry.ID,

        &entry.AccountID,

        &entry.Amount,

        &entry.CreatedAt,

    )

    return entry, err

}